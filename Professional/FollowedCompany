<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="../neatlist.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.4.0/axios.min.js" integrity="sha512-uMtXmF28A2Ab/JJO2t/vYhlaa/3ahUOgj1Zf27M5rOo8/+fcTUVH0/E0ll68njmjrLqOBjXM3V9NiPFL5ywWPQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>
<body>
    
    <!-- /*
    candidate
        initial 
        Full Name field_760998

    Location
        State, City =  field_761005, field_761006
        distance = not set

    Experience
        experience field_1169753 string

    Job Type
        job_type ex Full Time field_761015 array? just select one

    English Level
        english_level field_761011 array.value
    Fav icon(add/remove favorite function  131862 equal field_854119) 
        */ -->
<table border=1>
    <thead>
        <tr>
            <th> Company Name</th>
            <th>Industry</th>
            <th>Open Jobs Count</th>
            <th> | Following status | </th>
          
           
        </tr>
    </thead>
    
    <tbody data-followed-employer-tr-body>
       
    </tbody>
</table>
<div  data-exployer-employer-list></div>
<script>
async function fetchData(tableId, filters)
  {
    try{
      const response = await axios({
        method: "GET",
        url: `https://api.baserow.io/api/database/rows/table/${tableId}/${filters}`,
             
        headers: {
          Authorization: "Token "+neatlistB.key
        }
      })
      return response
    }catch (error){
      if(error.response)
      {
      console.log(error.response.data)
      console.log(error.response.status)
      console.log(error.response.headers)
      }
      else if(error.request)
      {
      console.log(error.request)
      }else{
      console.log('Error',error.message)
      }
      console.log(error.config)
    }
  }

  async function add(data, table, token) {
	try {
    const response =  await axios({
    method: "POST",
    url: "https://api.baserow.io/api/database/rows/table/"+table+"/",
     headers: {
        Authorization: "Token "+ token,
        "Content-Type": "application/json"
      }, data : data
    })
  return response;
  }catch (error){
      if(error.response)
      {
      console.log(error.response.data)
      console.log(error.response.status)
      console.log(error.response.headers)
      }
      else if(error.request)
      {
      console.log(error.request)
      }else{
      console.log('Error',error.message)
      }
      console.log(error.config)
    }
}
async function deleteData(table, rowId, token) {
	try {
  	const response = await axios({
      method: "DELETE",
      url: "https://api.baserow.io/api/database/rows/table/"+table+"/"+rowId+"/",
      headers: {
        Authorization: "Token "+token,
        "Content-Type": "application/json"
      }
    })
    return response
  }catch (error){
      if(error.response)
      {
      console.log(error.response.data)
      console.log(error.response.status)
      console.log(error.response.headers)
      }
      else if(error.request)
      {
      console.log(error.request)
      }else{
      console.log('Error',error.message)
      }
      console.log(error.config)
    }
}
//to header codes
async function updateRowByRowId(datas, table, token, rowId) {
  const response = await axios({
  method: "PATCH",
  url: "https://api.baserow.io/api/database/rows/table/"+table+"/"+rowId+"/",
  headers: {
    Authorization: "Token " + token,
    "Content-Type": "application/json"
  },
  data : datas
 /* data: {
    "post_status": object.value
  } */
	})
}
function getInitials(names) {
	const name = names.split(" ");
  if(name.length < 2) {
  	return names[0].toUpperCase();
  }
  return (name[0].charAt(0)+name[1].charAt(0)).toUpperCase()
}



class FollowedCompany {
  constructor(professional) { //professional dependency injection, empty for now
    this.id = professional.id //professional.id
    this.professional = professional
    this.explore = document.querySelector('[data-exployer-employer-list]')
    this.companies = null
    this.interestingCompanies = null
    this.openJobs = null
    this.getOpenJobs = async () => {
        const results = await fetchData("113442", `?filter__field_925534__equal=Open`).then(value=>{
            return value.data?.results ?? null
        })
        return results
    }
    this.fetchData = (table, filters) => { // added this 30th of June
      return fetchData(table, filters)
    }
  }
  _run() {
    this._loadFollowedCompany()
  }
  _isFollower(dataArr) {
   return dataArr.filter(professional=>professional.id).map(professional=>professional.id).includes(this.id)
  }
 async _unFollowCompany(companyId) {
    const selectedCompany = this.companies.filter(company=>company.id == companyId)[0]
    let dataArr = selectedCompany.field_1172163
      const updateDataArr = dataArr.filter(professional=>professional.id !== this.id).map(professional=>professional.id)
      const data = {
        "field_1172163": updateDataArr
      }
    return await  updateRowByRowId(data, "116205", neatlistB.key, companyId)
  }
 async _followCompany(companyId) {
    const selectedCompany = this.companies.filter(company=>company.id == companyId)[0]
    let dataArr = selectedCompany.field_1172163
    if(dataArr == null) {
      dataArr = []
    }
    dataArr.push({"id": this.id})
    const data = {
      "field_1172163": dataArr.map(professional=>professional.id)
    }
    return await updateRowByRowId(data, "116205", neatlistB.key, companyId)
   
  }
  _getOpenJobsByCompanyId(companyId) {
    const result = this.openJobs
      .filter(openJob=>openJob.field_751992[0].id)
      .filter(openJob=>openJob.field_751992[0].id == parseInt(companyId))
      
      return result
    }

  _loadSelectedCompanyById(companyId) {
      const selectedCompany = this.companies.filter(company=>company.id == companyId)[0]
      console.log( "Selected Company details below:")
      console.log( " > id: ", selectedCompany.id)
      console.log( " > name: ", selectedCompany.field_738195)
      console.log( " > logo: ", selectedCompany.field_738188)
      console.log( " > industry: ", selectedCompany.field_738189?.value || "Not set")


      this._getOpenJobsByCompanyId(selectedCompany.id).forEach(openJob=>{
        const companyName = openJob.field_752002[0]?.value ?? "Not set" //fix/remove empty company name
        const jobTitle = openJob.field_718236
        const salary = "$"+parseFloat(openJob.field_1153553).toFixed(2) + "/" + openJob.field_1153552 //hourly, weekly etc.
        const jobType = openJob.field_718255
        const jobId = openJob.id
        console.log( " > job id: ", jobId)  
        console.log( " > job title: ", jobTitle)
        console.log( " > salary: ", salary)
        console.log( " > job type: ", jobType)
        console.log( " > company name: ", companyName)
        console.log("--------------------------")
      })
  }
  _getCompanyOpenJobCountById(employerId) {
      const result = this.openJobs
        .filter(openJob=>openJob.field_751992[0].id)
        .filter(openJob=>openJob.field_751992[0].id == parseInt(employerId)).length 
      return result
  }

  async _loadCompanies() { // added this 30th of June
    try {
     
      await this.fetchData("116205", ``).then(value=>{
        const companiesCount = value.data?.count ?? 0
        if(companiesCount) {
          this.companies = value.data.results
          const myInterest =this.professional.field_1183271;
          const filteredData = this.companies.filter(company=>company.field_738189)
                                              .filter(company=>myInterest.map(interest => interest.value).includes(company.field_738189.value))
          this.interestingCompanies = filteredData
        }
      })
      
      
    } catch (error) {
      console.log(error)
    } finally {
      this._exploreCompanies("asc")
    }
   
  }
  _exploreCompanies(order) {
    
    let companyIds = []
    try {
     
      if(this.interestingCompanies?.length) {
        if(order === 'asc') {
          this.interestingCompanies.sort((a, b) => a.field_738188.localeCompare(b.field_738188))
        } else if(order === 'desc') {
          this.interestingCompanies.sort(a,b => b.field_738188.localeCompare(a.field_738188))
        }
        console.log(this.interestingCompanies, "this.interestingCompanies")
        if(!this.explore) {
          console.log("List container not ready!")
          return
        }
        this.explore.innerHTML = ""
        this.interestingCompanies.forEach((company)=>{

          const name = company.field_738188
          const logo = company.field_738195 ?? default_picture
          const industry = company.field_738189?.value || "Not set"
          const id = company.id
          let dataArr = company.field_1172163 //array of followers id
          const isFollower = this._isFollower(dataArr)
          if(isFollower) {
            //return // skip this company
          }
          const followingStatusText = isFollower ? "Following" : "Follow"
          const div = document.createElement("div")
          div.classList.add("one-explore-block-following")
          div.innerHTML = `
            <img src="https://assets.website-files.com/62a1fe4a88d6da5f8b5232b4/6494d17b58d1eae5d33c3802_Avatar2.png" loading="lazy" alt="" class="image-191">
            <div class="text-block-304" data-go-to-company>${name}</div>
            <div class="text-block-305">${industry}</div>
            <div class="div-block-790">
            <img src="https://assets.website-files.com/62a1fe4a88d6da5f8b5232b4/6494d0499746f8ab2f48e5a4_building-03.png" loading="lazy" alt="">
            <div class="text-block-306"><span data-open-jobs-count>${this._getCompanyOpenJobCountById(id)}</span> open jobs</div></div>
            <a data-w-id="b60cd05b-59fb-0fab-9db3-db5028ed8a1b" 
            href="#" class="button-51 w-button" 
            style="transform: translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotateX(0deg) rotateY(0deg) rotateZ(0deg) skew(0deg, 0deg); 
            transform-style: preserve-3d;" data-follow-unfollow="${followingStatusText}">${followingStatusText}</a>`
            
            div.querySelector("[data-follow-unfollow]").style.cursor = "pointer"
            div.querySelector("[data-follow-unfollow]").addEventListener("click", (e)=>{
              
              if(e.target.getAttribute('data-follow-unfollow') === "Follow") {
                try {
                  console.log("clicked Following", id)
                  this._followCompany(id).then(value=>{
                    e.target.innerHTML = "Following"
                  })
                } catch (error) {
                  console.log(error)
                }
              } else if(e.target.getAttribute('data-follow-unfollow') === "Following"){
                try {
                  console.log("clicked Follow", id)
                  this._unFollowCompany(id).then(value=>{
                    e.target.innerHTML = "Follow"
                  })
                } catch (error) {
                  console.log(error)
                }
              }
              
            })

            div.querySelector("[data-go-to-company]").style.cursor = "pointer"
            div.querySelector("[data-go-to-company]").addEventListener("click", (e)=>{
              e.preventDefault()
              this._loadSelectedCompanyById(id)
            })

            this.explore.appendChild(div)
           
        })
      }
    } catch (error) {
      console.log(error)
    } 

  }
  async _loadFollowedCompany() {
    if(!this.openJobs) {
        this.openJobs = await this.getOpenJobs().then(value=>{
          return value
        })
      } 
    await this.fetchData("116205", `?filter__field_1172163__link_row_has=${this.id}`).then(value=>{//48 is logged in user id
        const followedEmployers = value.data.results
        const table_followed_emp = document.querySelector("[data-followed-employer-tr-body]")
        table_followed_emp.innerHTML = ""
        
        followedEmployers.forEach(async (followedEmployer)=>{
            const tr = document.createElement("tr") 
            
            const tdCompanyName = document.createElement("td")
            tdCompanyName.textContent = followedEmployer?.field_738186 ?? "Not set" //company name
            tr.appendChild(tdCompanyName)

            const tdIndustry = document.createElement("td")
            tdIndustry.textContent = followedEmployer.field_738189?.value ?? "Not set" //industry
            tr.appendChild(tdIndustry)

            const tdOpenJobsCount = document.createElement("td")
            tdOpenJobsCount.textContent = this._getCompanyOpenJobCountById(followedEmployer.id) 
            tr.appendChild(tdOpenJobsCount) //open jobs count

            const tdFollowingStatus = document.createElement("td")
            tdFollowingStatus.textContent = 'Following(this column has click event that unfollows the company)'
            tdFollowingStatus.addEventListener("click", ()=>{ // added click event to unfollow the company
                console.log("clicked!")
                const dataArr = followedEmployer?.field_1172163 ?? []

                const updateDataArr = dataArr.filter(followedEmployer=>followedEmployer.id !== this.id).map(followedEmployer=>followedEmployer.id) //48 is logged in user id
                const data = {
                    "field_1172163": updateDataArr
                }
              updateRowByRowId(data, "116205", neatlistB.key, followedEmployer.id).then(res => this._run()) // this updates the link field column with new data array >> tr.remove() if youll use table
            })
            tr.appendChild(tdFollowingStatus)

            table_followed_emp.appendChild(tr) // add new row to table
        })

        
        
    })
  }

}
document.addEventListener("DOMContentLoaded", ()=>{
fetchData("119373", `?filter__field_760997__equal=prof4@test.com`).then(value=>{
  console.log(value.data.results[0])
  const followedCompany = new FollowedCompany(value.data.results[0])
  followedCompany._run()
  followedCompany._loadCompanies()
  })
})


</script>
</body>
</html> 
